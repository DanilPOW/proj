import fitz
import re

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LEFT_MARGIN = 85.04  # 3 —Å–º –≤ –ø—É–Ω–∫—Ç–∞—Ö
RIGHT_MARGIN = 56.69  # 2 —Å–º –≤ –ø—É–Ω–∫—Ç–∞—Ö
TOLERANCE_PT = 5

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
MATH_FONTS = {
    "cambriamath",
    "cambria-math", 
    "cambriamt",
    "cmmi",
    "cmr",
    "cmsy",
    "cmex",
    "stix",
    "stixmath",
    "mathtime",
    "xits",
    "xitsmath",
    "latinmodernmath",
    "latinmodern-math",
    "texgyrepagella",
    "texgyretermes",
    "asanamath",
    "neoeuler"
}

def normalize_font_name(font_name):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not font_name:
        return ""
    return font_name.lower().replace(" ", "").replace("-", "").replace("_", "")

def is_math_font(font_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à—Ä–∏—Ñ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
    normalized = normalize_font_name(font_name)
    return any(math_font in normalized for math_font in MATH_FONTS)

def group_nearby_spans(math_spans, vertical_tolerance=8, horizontal_gap=30):
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª–∏–∑–∫–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–∞–Ω–æ–≤ –≤ –µ–¥–∏–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    """
    if not math_spans:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∞–Ω—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Å–Ω–∞—á–∞–ª–∞ –ø–æ Y, –ø–æ—Ç–æ–º –ø–æ X)
    sorted_spans = sorted(math_spans, key=lambda s: (s['bbox'].y0, s['bbox'].x0))
    
    groups = []
    current_group = [sorted_spans[0]]
    
    for span in sorted_spans[1:]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∞–Ω –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
        can_merge = False
        
        for group_span in current_group:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–ª–∏ –±–ª–∏–∑–æ—Å—Ç—å
            vertical_overlap = (
                span['bbox'].y0 <= group_span['bbox'].y1 + vertical_tolerance and
                span['bbox'].y1 >= group_span['bbox'].y0 - vertical_tolerance
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –±–ª–∏–∑–æ—Å—Ç—å
            horizontal_distance = min(
                abs(span['bbox'].x0 - group_span['bbox'].x1),
                abs(group_span['bbox'].x0 - span['bbox'].x1)
            )
            
            horizontal_close = (
                horizontal_distance <= horizontal_gap or
                span['bbox'].intersects(group_span['bbox'])
            )
            
            if vertical_overlap and horizontal_close:
                can_merge = True
                break
        
        if can_merge:
            current_group.append(span)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            groups.append(current_group)
            current_group = [span]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    if current_group:
        groups.append(current_group)
    
    return groups

def merge_span_group(span_group):
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–ø–∞–Ω–æ–≤ –≤ –µ–¥–∏–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
    """
    if not span_group:
        return None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π bbox
    min_x0 = min(span['bbox'].x0 for span in span_group)
    min_y0 = min(span['bbox'].y0 for span in span_group)
    max_x1 = max(span['bbox'].x1 for span in span_group)
    max_y1 = max(span['bbox'].y1 for span in span_group)
    
    combined_bbox = fitz.Rect(min_x0, min_y0, max_x1, max_y1)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∞–Ω—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Ç–µ–∫—Å—Ç–∞
    sorted_spans = sorted(span_group, key=lambda s: (s['bbox'].y0, s['bbox'].x0))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    combined_text = ""
    for i, span in enumerate(sorted_spans):
        if i > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ø–∞–Ω–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ
            prev_span = sorted_spans[i-1]
            gap = span['bbox'].x0 - prev_span['bbox'].x1
            if gap > 3:  # –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ 3 –ø—É–Ω–∫—Ç–æ–≤
                combined_text += " "
        combined_text += span['text']
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–∞—Ö
    fonts_used = list(set(span['font'] for span in span_group))
    
    return {
        'text': combined_text.strip(),
        'bbox': combined_bbox,
        'fonts': fonts_used,
        'span_count': len(span_group),
        'spans': span_group
    }

def find_formula_numbering(page, formula_bbox):
    """
    –ü–æ–∏—Å–∫ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª—ã —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–µ—ë
    """
    try:
        # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –≤–ø—Ä–∞–≤–æ –æ—Ç —Ñ–æ—Ä–º—É–ª—ã
        search_area = fitz.Rect(
            formula_bbox.x1,
            formula_bbox.y0 - 5,
            formula_bbox.x1 + 100,
            formula_bbox.y1 + 5
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        text_in_area = page.get_text("text", clip=search_area).strip()
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏: (1), (2), [1], [2] –∏ —Ç.–¥.
        numbering_patterns = [
            r'$$\s*(\d+)\s*$$',  # (1), (2)
            r'$$\s*(\d+)\s*$$',  # [1], [2]
            r'$$\s*(\d+\.\d+)\s*$$',  # (1.1), (2.3)
        ]
        
        for pattern in numbering_patterns:
            match = re.search(pattern, text_in_area)
            if match:
                return True, match.group(0)
        
        return False, ""
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª—ã: {e}")
        return False, ""

def analyze_pdf_formulas(pdf_path, existing_images):
    """
    –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—É–ª –≤ PDF –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —à—Ä–∏—Ñ—Ç—É
    –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–ï–†–í–´–ú, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    try:
        doc = fitz.open(pdf_path)
    except Exception as e:
        raise Exception(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª: {str(e)}")
    
    results = []
    
    print(f"üöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —à—Ä–∏—Ñ—Ç—É (–ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)")
    
    for page_num in range(len(doc)):
        try:
            page = doc.load_page(page_num)
            text_dict = page.get_text("dict")
            
            print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—É–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —à—Ä–∏—Ñ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_fonts = set()
            math_spans = []
            
            for block in text_dict.get("blocks", []):
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            font_name = span.get("font", "")
                            text = span.get("text", "").strip()
                            
                            if font_name:
                                all_fonts.add(font_name)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à—Ä–∏—Ñ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
                            if font_name and text and is_math_font(font_name):
                                bbox = fitz.Rect(span["bbox"])
                                
                                math_spans.append({
                                    'text': text,
                                    'font': font_name,
                                    'bbox': bbox,
                                    'size': span.get("size", 12)
                                })
                                
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–Ω: '{text}' (—à—Ä–∏—Ñ—Ç: {font_name})")
            
            print(f"  –í—Å–µ —à—Ä–∏—Ñ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {sorted(all_fonts)}")
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(math_spans)} —Å–ø–∞–Ω–æ–≤ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º")
            
            if not math_spans:
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∞–Ω—ã
            span_groups = group_nearby_spans(math_spans)
            print(f"  –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {len(span_groups)} —Ñ–æ—Ä–º—É–ª")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for group_idx, span_group in enumerate(span_groups):
                try:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ
                    formula_info = merge_span_group(span_group)
                    if not formula_info:
                        continue
                    
                    formula_text = formula_info['text']
                    formula_bbox = formula_info['bbox']
                    
                    print(f"  –§–æ—Ä–º—É–ª–∞ {group_idx + 1}: '{formula_text}' (—Å–ø–∞–Ω–æ–≤: {formula_info['span_count']})")
                    
                    # –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò!
                    # –§–æ—Ä–º—É–ª—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª—ã
                    page_width = page.rect.width
                    content_center = (LEFT_MARGIN + (page_width - RIGHT_MARGIN)) / 2
                    formula_center = (formula_bbox.x0 + formula_bbox.x1) / 2
                    
                    is_centered = abs(formula_center - content_center) <= TOLERANCE_PT * 4  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å–∫
                    margins_ok = (formula_bbox.x0 >= LEFT_MARGIN - TOLERANCE_PT and
                                 formula_bbox.x1 <= page_width - RIGHT_MARGIN + TOLERANCE_PT)
                    
                    # –ü–æ–∏—Å–∫ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                    has_numbering, numbering_text = find_formula_numbering(page, formula_bbox)
                    
                    # –ú–Ø–ì–ö–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢
                    gost_compliant = is_centered and margins_ok
                    
                    results.append({
                        "page": page_num + 1,
                        "text": formula_text,
                        "bbox": [formula_bbox.x0, formula_bbox.y0, formula_bbox.x1, formula_bbox.y1],
                        "is_centered": is_centered,
                        "margins_ok": margins_ok,
                        "has_numbering": has_numbering,
                        "numbering_text": numbering_text,
                        "fonts": formula_info['fonts'],
                        "span_count": formula_info['span_count'],
                        "type": "math_font_detected",
                        "gost_compliant": gost_compliant
                    })
                    
                    print(f"    üéØ –î–û–ë–ê–í–õ–ï–ù–ê –§–û–†–ú–£–õ–ê: '{formula_text}' - —Ü–µ–Ω—Ç—Ä={is_centered}, –ø–æ–ª—è={margins_ok}, –Ω–æ–º–µ—Ä={has_numbering}")
                    if has_numbering:
                        print(f"      üìù –ù—É–º–µ—Ä–∞—Ü–∏—è: {numbering_text}")
                
                except Exception as e:
                    print(f"    –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group_idx}: {e}")
                    continue
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—É–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {e}")
            continue
    
    doc.close()
    print(f"üèÅ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ñ–æ—Ä–º—É–ª")
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    for i, formula in enumerate(results, 1):
        print(f"  üìê –§–æ—Ä–º—É–ª–∞ {i}: '{formula['text']}' (—Å—Ç—Ä: {formula['page']}, —à—Ä–∏—Ñ—Ç—ã: {formula['fonts']})")
        if formula['has_numbering']:
            print(f"    üìù –ù—É–º–µ—Ä–∞—Ü–∏—è: {formula['numbering_text']}")
    
    return results
